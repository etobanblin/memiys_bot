const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs');
const path = require('path');
const { createCanvas, loadImage } = require('canvas');
const axios = require('axios');
const { exec } = require('child_process');
const BOT_TOKEN = '8011558643:AAFc3P3Brnhb1bSWcp7IwyVD45_EFO7XVmM';

const MEMES_DAY_FOLDER = 'memes_day';
const MEMES_VIBE_FOLDER = 'memes_vibe';
const MEMES_AUGURY_FOLDER = 'memes_augury';
const TEMP_FOLDER = 'temp';

if (!fs.existsSync(TEMP_FOLDER)) fs.mkdirSync(TEMP_FOLDER);
if (!fs.existsSync(MEMES_DAY_FOLDER)) fs.mkdirSync(MEMES_DAY_FOLDER);
if (!fs.existsSync(MEMES_VIBE_FOLDER)) fs.mkdirSync(MEMES_VIBE_FOLDER);
if (!fs.existsSync(MEMES_AUGURY_FOLDER)) fs.mkdirSync(MEMES_AUGURY_FOLDER);


const app = express();
const PORT = process.env.PORT || 3000;


const bot = new TelegramBot(BOT_TOKEN);
const webhookUrl = `https://${process.env.REPL_ID}.id.repl.co/${BOT_TOKEN}`;
bot.setWebHook(webhookUrl);

app.use(express.json());
app.post(`/${BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});


function startServer(port) {
    const server = app.listen(port, '0.0.0.0', () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        console.log(`–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).on('error', (err) => {
        if (err.code === 'EADDRINUSE') {
            console.log(`–ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ—Ä—Ç ${port + 1}`);
            startServer(port + 1);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err);
        }
    });
}

startServer(PORT);


const menuKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üì∏ –ú–µ–º –¥–Ω—è' }, { text: 'üîÆ –ì–∞–¥–∞–Ω–∏–µ –ø–æ –º–µ–º—É' }],
            [{ text: 'üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞–π–±' }, { text: 'üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä' }],
        ],
        resize_keyboard: true,
    },
};


function getRandomMeme(folder) {
    try {
        const memes = fs.readdirSync(folder);
        return memes.length > 0 ? path.join(folder, memes[Math.floor(Math.random() * memes.length)]) : null;
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞ –∏–∑ –ø–∞–ø–∫–∏ ${folder}: ${e}`);
        return null;
    }
}


async function generatePrediction(prompt) {
    return new Promise((resolve, reject) => {
        const pythonScriptPath = path.join(__dirname, 'generate_prediction.py');
        const command = `python3 ${pythonScriptPath} "${prompt}"`;

        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Python-—Å–∫—Ä–∏–ø—Ç–∞: ${error}`);
                resolve("üîÆ –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å! üçÄ");
                return;
            }
            if (stderr) {
                console.error(`–û—à–∏–±–∫–∞ –≤ Python-—Å–∫—Ä–∏–ø—Ç–µ: ${stderr}`);
                resolve("üîÆ –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å! üçÄ");
                return;
            }
            resolve(stdout.trim());
        });
    });
}


bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:', menuKeyboard);
});


bot.onText(/üì∏ –ú–µ–º –¥–Ω—è/, async (msg) => {
    const memePath = getRandomMeme(MEMES_DAY_FOLDER);
    if (memePath) {
        await bot.sendPhoto(msg.chat.id, memePath, { caption: 'üì∏ –í–æ—Ç —Ç–≤–æ–π –º–µ–º –¥–Ω—è!', reply_markup: menuKeyboard });
    } else {
        bot.sendMessage(msg.chat.id, 'üò¢ –ú–µ–º–æ–≤ –¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç!', menuKeyboard);
    }
});


bot.onText(/üîÆ –ì–∞–¥–∞–Ω–∏–µ –ø–æ –º–µ–º—É/, async (msg) => {
    const memePath = getRandomMeme(MEMES_AUGURY_FOLDER);
    if (memePath) {
        const prediction = await generatePrediction("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–±–∞–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–º–∞.");
        await bot.sendPhoto(msg.chat.id, memePath, { caption: `üîÆ ${prediction}`, reply_markup: menuKeyboard });
    } else {
        bot.sendMessage(msg.chat.id, 'üò¢ –ú–µ–º–æ–≤ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç!', menuKeyboard);
    }
});


bot.onText(/üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞–π–±/, async (msg) => {
    const memePath = getRandomMeme(MEMES_VIBE_FOLDER);
    if (memePath) {
        await bot.sendPhoto(msg.chat.id, memePath, { caption: 'üé≤ –í–æ—Ç —Ç–≤–æ–π –≤–∞–π–±!', reply_markup: menuKeyboard });
    } else {
        bot.sendMessage(msg.chat.id, 'üò¢ –í–∞–π–±-–º–µ–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!', menuKeyboard);
    }
});


const userState = {};


bot.onText(/üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä/, (msg) => {
    bot.sendMessage(msg.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.', menuKeyboard);
    userState[msg.chat.id] = { step: 'waiting_for_image' };
});


bot.on('photo', async (msg) => {
    const chatId = msg.chat.id;
    if (userState[chatId]?.step === 'waiting_for_image') {
        const fileId = msg.photo[msg.photo.length - 1].file_id;
        const filePath = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${filePath.file_path}`;
        const imagePath = path.join(TEMP_FOLDER, `${fileId}.jpg`);
        const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, response.data);
        userState[chatId] = { step: 'waiting_for_text', imagePath };
        bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.', menuKeyboard);
    }
});


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (userState[chatId]?.step === 'waiting_for_text') {
        const text = msg.text;
        const demotivatorPath = await createDemotivator(userState[chatId].imagePath, text);
        if (demotivatorPath) {
            await bot.sendPhoto(chatId, demotivatorPath, { caption: 'üñºÔ∏è –í–∞—à –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤!', reply_markup: menuKeyboard });
        } else {
            bot.sendMessage(chatId, 'üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä.', menuKeyboard);
        }
        delete userState[chatId];
    }
});


async function createDemotivator(imagePath, text) {
    try {
        const img = await loadImage(imagePath);
        const canvas = createCanvas(550, 650);
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, 550, 650);
        ctx.strokeStyle = 'white';
        ctx.lineWidth = 2;
        ctx.strokeRect(25, 25, 500, 500);
        ctx.drawImage(img, 30, 30, 490, 490);
        ctx.font = 'bold 40px Arial';
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        ctx.fillText(text, 275, 550);
        const outputPath = path.join(TEMP_FOLDER, 'demotivator.jpg');
        const out = fs.createWriteStream(outputPath);
        const stream = canvas.createJPEGStream();
        stream.pipe(out);
        return new Promise((resolve) => out.on('finish', () => resolve(outputPath)));
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞: ${e}`);
        return null;
    }
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏!');